#!/bin/python
import sys
import uuid
import os.path
import re

def findWholeWord_Regex(w):
    return re.compile(r'\b({0})\b'.format(w)).search

FileCode = """
// This code was added by doctest_registerlibrary.cmake in order to ensure that the tests are properly run by DocTest.
// Please commit it if needed, it will be added only once, and never modified.
// Before committing, you can remove this comment, as long as you leave the function below.
int DocTestRegister_GUID() { return 0; }
"""

DocTestRegisterCppCode = """
// This file is autogenerated.
// It was added by doctest_registerlibrary.cmake in order to ensure that the tests are properly run by DocTest.
// Please commit it if needed, it will be modified only if new files are added.

[DeclareRegisterFunctions]

int DocTestRegister()
{
  int dummy_sum = 0;
[CallRegisterFunctions]
  return dummy_sum;
}
"""
allowedExtensions = ["cpp", "cc", "cxx"]

# words that indicate that a file actually uses doctest
doctest_usage_hints = ["doctest.h", "TEST_CASE", "DOCTEST_TEST_CASE"]
doctest_usage_hints_re = map(findWholeWord_Regex, doctest_usage_hints)


def DoesSourceFileUseDocTest(lines):
    doctest_tokens=["doctest.h", "TEST_CASE", "DOCTEST_TEST_CASE"]
    doesFileUseDocTest = False
    for line in lines:
        for exp in doctest_usage_hints_re:
            if exp(line):
                doesFileUseDocTest = True
        if (doesFileUseDocTest):
            break
    return doesFileUseDocTest

def ProcessFile(filename):
    #print("ProcessFile " + filename)
    if (filename == "doctest_registerlibrary.cpp"):
        return

    file_extension = filename.split(".")[-1]
    if not file_extension in allowedExtensions:
        return

    with open(filename, 'r') as f:
        lines = f.readlines()

    if not DoesSourceFileUseDocTest(lines):
        return

    tokenPresent = False
    for line in lines:
        if ("int DocTestRegister_" in line):
            tokenPresent = True

    if (not tokenPresent) :
        id = str(uuid.uuid4()).replace("-", "_")
        with open(filename, 'a') as f:
            codeWithUuid = FileCode.replace("GUID", id)
            f.write(codeWithUuid)
            print(filename + " was modified (added DocTestRegister_ function()")


def RegisterCppFiles(sourceFiles):
    for filename in sourceFiles:
        ProcessFile(filename)

def RegisterMainFile(sourcesFiles):
    #print("ProcessLibrary ")
    guidList = []
    for filename in sourcesFiles:
        file_extension = filename.split(".")[-1]
        if not file_extension in allowedExtensions:
            continue

        guid = ""
        with open(filename, 'r') as f:
            lines = f.readlines()
        for line in lines:
            if ("int DocTestRegister_" in line):
                line = line.replace("int", "").replace("(", "").replace(")", "")
                words = line.split()
                for word in words:
                    if ("DocTestRegister_" in word):
                        guid = word.replace("DocTestRegister_", "")
        if (guid != ""):
            guidList.append(guid)

    declareRegisterFunctionsCode = ""
    callRegisterFunctionsCode = ""
    for guid in guidList:
        declareRegisterFunctionsCode = declareRegisterFunctionsCode + "int DocTestRegister_" + guid + "();\n"
        callRegisterFunctionsCode = callRegisterFunctionsCode + "  dummy_sum += DocTestRegister_" + guid + "();\n";

    codeWithGuidList = DocTestRegisterCppCode
    codeWithGuidList = codeWithGuidList.replace("[DeclareRegisterFunctions]", declareRegisterFunctionsCode)
    codeWithGuidList = codeWithGuidList.replace("[CallRegisterFunctions]", callRegisterFunctionsCode)
    #print(codeWithGuidList)

    if (not os.path.isfile("doctest_registerlibrary.cpp") ):
        print("doctest_registerlibrary.cpp was created (you can add it to source control, or ignore it, as preferred)")
    with open("doctest_registerlibrary.cpp", "w") as f:
        f.write(codeWithGuidList)



def help():
    helpMessage = """
        Usage :
            _command_ -registercppfiles file1.cpp file2.cpp ...
                Will add a DocTestRegister_GUID() to cpp files
            _command_ -registermainfile file1.cpp file2.cpp file3.cpp ...
                Will create a doctest_registerlibrary.cpp file with one function that calls all DocTestRegister_GUID() functions
    """
    helpMessage = helpMessage.replace("_command_", sys.argv[0])
    print(helpMessage)

def main():
    if (len(sys.argv) < 2):
        help()
        exit(1)
    if (sys.argv[1] == "-registercppfiles"):
        files = sys.argv[2:]
        RegisterCppFiles(files)
    elif (sys.argv[1] == "-registermainfile"):
        files = sys.argv[2:]
        RegisterMainFile(files)
    else:
        help()

main()
